'use strict';

import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import c from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { NavLink } from 'react-router-dom';
import { eventHandlersFor, htmlAttributesFor } from 'the-component-util';
import { TheIcon } from 'the-icon';
import { parse as parseUrl } from 'url';
import TheLinkStyle from './TheLinkStyle';
/**
 * Link of the-components
 */

var TheLink =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TheLink, _React$Component);

  function TheLink() {
    _classCallCheck(this, TheLink);

    return _possibleConstructorReturn(this, _getPrototypeOf(TheLink).apply(this, arguments));
  }

  _createClass(TheLink, [{
    key: "render",
    value: function render() {
      var props = this.props;
      var activeClassName = props.activeClassName,
          activeStyle = props.activeStyle,
          children = props.children,
          className = props.className,
          color = props.color,
          exact = props.exact,
          icon = props.icon,
          replace = props.replace,
          strict = props.strict,
          _props$style = props.style,
          style = _props$style === void 0 ? {} : _props$style,
          to = props.to;

      if (color && style) {
        style.color = color;
      }

      return React.createElement(TheLink.Link, _extends({}, htmlAttributesFor(props, {
        except: ['className', 'style']
      }), eventHandlersFor(props, {
        except: []
      }), {
        activeClassName: c('the-link-active', activeClassName),
        className: c('the-link', className)
      }, {
        activeStyle: activeStyle,
        exact: exact,
        replace: replace,
        strict: strict,
        style: style,
        to: to
      }), icon && React.createElement(TheIcon, {
        className: c('the-link-icon', icon)
      }), children);
    }
  }], [{
    key: "Link",
    value: function Link(props) {
      var children = props.children,
          className = props.className,
          to = props.to;

      var _ref = to && parseUrl(to) || {},
          protocol = _ref.protocol;

      if (protocol) {
        // External link
        return React.createElement("a", _extends({}, htmlAttributesFor(props, {
          except: ['className', 'href']
        }), eventHandlersFor(props, {
          except: []
        }), {
          className: c('the-link-external', className),
          href: to
        }), children);
      }

      return React.createElement(NavLink, props, children);
    }
  }]);

  return TheLink;
}(React.Component);

TheLink.Style = TheLinkStyle;
TheLink.propTypes = {
  /** Class name for active state */
  activeClassName: PropTypes.string,

  /** Style for active state */
  activeStyle: PropTypes.object,

  /** Color theme */
  color: PropTypes.string,

  /** Exact path */
  exact: PropTypes.bool,

  /** Icon class name */
  icon: PropTypes.string,

  /** String path */
  strict: PropTypes.bool,

  /** Link to */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired
};
TheLink.defaultProps = {
  activeClassName: null,
  activeStyle: {},
  color: null,
  exact: false,
  icon: null,
  replace: false,
  role: 'link',
  strict: false,
  to: null
};
TheLink.displayName = 'TheLink';
export default TheLink;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZUxpbmsuanMiXSwibmFtZXMiOlsiYyIsIlByb3BUeXBlcyIsIlJlYWN0IiwiTmF2TGluayIsImV2ZW50SGFuZGxlcnNGb3IiLCJodG1sQXR0cmlidXRlc0ZvciIsIlRoZUljb24iLCJwYXJzZSIsInBhcnNlVXJsIiwiVGhlTGlua1N0eWxlIiwiVGhlTGluayIsInByb3BzIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsImNvbG9yIiwiZXhhY3QiLCJpY29uIiwicmVwbGFjZSIsInN0cmljdCIsInN0eWxlIiwidG8iLCJleGNlcHQiLCJwcm90b2NvbCIsIkNvbXBvbmVudCIsIlN0eWxlIiwicHJvcFR5cGVzIiwic3RyaW5nIiwib2JqZWN0IiwiYm9vbCIsIm9uZU9mVHlwZSIsImlzUmVxdWlyZWQiLCJkZWZhdWx0UHJvcHMiLCJyb2xlIiwiZGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBLE9BQU9BLENBQVAsTUFBYyxZQUFkO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUFTQyxPQUFULFFBQXdCLGtCQUF4QjtBQUNBLFNBQVNDLGdCQUFULEVBQTJCQyxpQkFBM0IsUUFBb0Qsb0JBQXBEO0FBQ0EsU0FBU0MsT0FBVCxRQUF3QixVQUF4QjtBQUNBLFNBQVNDLEtBQUssSUFBSUMsUUFBbEIsUUFBa0MsS0FBbEM7QUFDQSxPQUFPQyxZQUFQLE1BQXlCLGdCQUF6QjtBQUVBOzs7O0lBR01DLE87Ozs7Ozs7Ozs7Ozs7NkJBdUJNO0FBQUEsVUFDQUMsS0FEQSxHQUNVLElBRFYsQ0FDQUEsS0FEQTtBQUFBLFVBR05DLGVBSE0sR0FjSkQsS0FkSSxDQUdOQyxlQUhNO0FBQUEsVUFJTkMsV0FKTSxHQWNKRixLQWRJLENBSU5FLFdBSk07QUFBQSxVQUtOQyxRQUxNLEdBY0pILEtBZEksQ0FLTkcsUUFMTTtBQUFBLFVB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T2xCO0FBQ0FYLEVBQUFBLEtBQUssRUFBRWhCLFNBQVMsQ0FBQzZCLElBUkM7O0FBU2xCO0FBQ0FaLEVBQUFBLElBQUksRUFBRWpCLFNBQVMsQ0FBQzJCLE1BVkU7O0FBV2xCO0FBQ0FSLEVBQUFBLE1BQU0sRUFBRW5CLFNBQVMsQ0FBQzZCLElBWkE7O0FBYWxCO0FBQ0FSLEVBQUFBLEVBQUUsRUFBRXJCLFNBQVMsQ0FBQzhCLFNBQVYsQ0FBb0IsQ0FBQzlCLFNBQVMsQ0FBQzJCLE1BQVgsRUFBbUIzQixTQUFTLENBQUM0QixNQUE3QixDQUFwQixFQUEwREc7QUFkNUMsQ0FBcEI7QUFpQkF0QixPQUFPLENBQUN1QixZQUFSLEdBQXVCO0FBQ3JCckIsRUFBQUEsZUFBZSxFQUFFLElBREk7QUFFckJDLEVBQUFBLFdBQVcsRUFBRSxFQUZRO0FBR3JCRyxFQUFBQSxLQUFLLEVBQUUsSUFIYztBQUlyQkMsRUFBQUEsS0FBSyxFQUFFLEtBSmM7QUFLckJDLEVBQUFBLElBQUksRUFBRSxJQUxlO0FBTXJCQyxFQUFBQSxPQUFPLEVBQUUsS0FOWTtBQU9yQmUsRUFBQUEsSUFBSSxFQUFFLE1BUGU7QUFRckJkLEVBQUFBLE1BQU0sRUFBRSxLQVJhO0FBU3JCRSxFQUFBQSxFQUFFLEVBQUU7QUFUaUIsQ0FBdkI7QUFZQVosT0FBTyxDQUFDeUIsV0FBUixHQUFzQixTQUF0QjtBQUVBLGVBQWV6QixPQUFmIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgYyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgeyBldmVudEhhbmRsZXJzRm9yLCBodG1sQXR0cmlidXRlc0ZvciB9IGZyb20gJ3RoZS1jb21wb25lbnQtdXRpbCdcbmltcG9ydCB7IFRoZUljb24gfSBmcm9tICd0aGUtaWNvbidcbmltcG9ydCB7IHBhcnNlIGFzIHBhcnNlVXJsIH0gZnJvbSAndXJsJ1xuaW1wb3J0IFRoZUxpbmtTdHlsZSBmcm9tICcuL1RoZUxpbmtTdHlsZSdcblxuLyoqXG4gKiBMaW5rIG9mIHRoZS1jb21wb25lbnRzXG4gKi9cbmNsYXNzIFRoZUxpbmsgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgTGluayAocHJvcHMpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBjbGFzc05hbWUsIHRvIH0gPSBwcm9wc1xuICAgIGNvbnN0IHsgcHJvdG9jb2wgfSA9ICh0byAmJiBwYXJzZVVybCh0bykgfHwge30pXG4gICAgaWYgKHByb3RvY29sKSB7XG4gICAgICAvLyBFeHRlcm5hbCBsaW5rXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8YSB7Li4uaHRtbEF0dHJpYnV0ZXNGb3IocHJvcHMsIHsgZXhjZXB0OiBbJ2NsYXNzTmFtZScsICdocmVmJ10gfSl9XG4gICAgICAgICAgIHsuLi5ldmVudEhhbmRsZXJzRm9yKHByb3BzLCB7IGV4Y2VwdDogW10gfSl9XG4gICAgICAgICAgIGNsYXNzTmFtZT17YygndGhlLWxpbmstZXh0ZXJuYWwnLCBjbGFzc05hbWUpfVxuICAgICAgICAgICBocmVmPXt0b31cbiAgICAgICAgPntjaGlsZHJlbn08L2E+XG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8TmF2TGluayB7Li4ucHJvcHN9XG5cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9OYXZMaW5rPlxuICAgIClcbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpc1xuICAgIGNvbnN0IHtcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvcixcbiAgICAgIGV4YWN0LFxuICAgICAgaWNvbixcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdHJpY3QsXG4gICAgICBzdHlsZSA9IHt9LFxuICAgICAgdG8sXG4gICAgfSA9IHByb3BzXG4gICAgaWYgKGNvbG9yICYmIHN0eWxlKSB7XG4gICAgICBzdHlsZS5jb2xvciA9IGNvbG9yXG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8VGhlTGluay5MaW5rIHsuLi5odG1sQXR0cmlidXRlc0Zvcihwcm9wcywgeyBleGNlcHQ6IFsnY2xhc3NOYW1lJywgJ3N0eWxlJ10gfSl9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5ldmVudEhhbmRsZXJzRm9yKHByb3BzLCB7IGV4Y2VwdDogW10gfSl9XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT17YygndGhlLWxpbmstYWN0aXZlJywgYWN0aXZlQ2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjKCd0aGUtbGluaycsIGNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIHsuLi57IGFjdGl2ZVN0eWxlLCBleGFjdCwgcmVwbGFjZSwgc3RyaWN0LCBzdHlsZSwgdG8gfX1cbiAgICAgID5cbiAgICAgICAge2ljb24gJiYgPFRoZUljb24gY2xhc3NOYW1lPXtjKCd0aGUtbGluay1pY29uJywgaWNvbil9Lz59XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVGhlTGluay5MaW5rPlxuICAgIClcbiAgfVxufVxuXG5UaGVMaW5rLlN0eWxlID0gVGhlTGlua1N0eWxlXG5cblRoZUxpbmsucHJvcFR5cGVzID0ge1xuICAvKiogQ2xhc3MgbmFtZSBmb3IgYWN0aXZlIHN0YXRlICovXG4gIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIFN0eWxlIGZvciBhY3RpdmUgc3RhdGUgKi9cbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKiBDb2xvciB0aGVtZSAqL1xuICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIEV4YWN0IHBhdGggKi9cbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAvKiogSWNvbiBjbGFzcyBuYW1lICovXG4gIGljb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKiBTdHJpbmcgcGF0aCAqL1xuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAvKiogTGluayB0byAqL1xuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWQsXG59XG5cblRoZUxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6IG51bGwsXG4gIGFjdGl2ZVN0eWxlOiB7fSxcbiAgY29sb3I6IG51bGwsXG4gIGV4YWN0OiBmYWxzZSxcbiAgaWNvbjogbnVsbCxcbiAgcmVwbGFjZTogZmFsc2UsXG4gIHJvbGU6ICdsaW5rJyxcbiAgc3RyaWN0OiBmYWxzZSxcbiAgdG86IG51bGwsXG59XG5cblRoZUxpbmsuZGlzcGxheU5hbWUgPSAnVGhlTGluaydcblxuZXhwb3J0IGRlZmF1bHQgVGhlTGlua1xuIl19