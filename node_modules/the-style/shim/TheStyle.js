'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _classnames = _interopRequireDefault(require("classnames"));

var _nanoCss = _interopRequireDefault(require("nano-css"));

var _keyframes = require("nano-css/addon/keyframes");

var _prefixer = require("nano-css/addon/prefixer");

var _unitless = require("nano-css/addon/unitless");

var _os = require("os");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _theComponentConstants = require("the-component-constants");

/**
 * Style of the-components
 */
var TheStyle =
/*#__PURE__*/
function (_React$PureComponent) {
  (0, _inherits2.default)(TheStyle, _React$PureComponent);

  function TheStyle() {
    (0, _classCallCheck2.default)(this, TheStyle);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TheStyle).apply(this, arguments));
  }

  (0, _createClass2.default)(TheStyle, [{
    key: "getChildrenAsString",
    value: function getChildrenAsString() {
      var children = this.props.children;

      if (!children) {
        return null;
      }

      return [].concat(children).map(function (child) {
        return child;
      }).join(_os.EOL);
    }
  }, {
    key: "getInnerHTML",
    value: function getInnerHTML() {
      return [this.getStylesAsString(), this.getChildrenAsString()].filter(Boolean).join(_os.EOL);
    }
  }, {
    key: "getStylesAsString",
    value: function getStylesAsString() {
      var _this$props = this.props,
          prefix = _this$props.prefix,
          styles = _this$props.styles;

      if (!styles) {
        return null;
      }

      return Object.keys(styles).map(function (selector) {
        return TheStyle.styleString([prefix, selector].filter(Boolean).join(' '), styles[selector]);
      }).filter(Boolean).join(_os.EOL);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = props.className,
          id = props.id,
          type = props.type;
      return _react.default.createElement("style", (0, _extends2.default)({
        className: (0, _classnames.default)('the-style', className)
      }, {
        id: id,
        type: type
      }, {
        dangerouslySetInnerHTML: {
          __html: this.getInnerHTML()
        }
      }));
    }
  }], [{
    key: "styles",
    value: function styles(values) {
      return Object(values);
    }
    /**
     * Convert style into style string
     * @param {string} selector - Selector string
     * @param {Object} style - Style string
     * @param {string} [atRule=null]
     * @returns {Object} Style object
     */

  }, {
    key: "styleString",
    value: function styleString(selector, style) {
      var _this = this;

      var atRule = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (/^@/.test(selector)) {
        var styleString = Object.entries(style).map(function (_ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              s = _ref2[0],
              sl = _ref2[1];

          return _this.styleString(s, sl);
        }).join(' ');
        return "".concat(selector, " { ").concat(styleString, "}");
      }

      var nano = _nanoCss.default.create({
        client: false
      });

      (0, _unitless.addon)(nano);
      (0, _prefixer.addon)(nano);
      (0, _keyframes.addon)(nano);
      nano.put(selector, style, atRule);
      return String(nano.raw);
    }
    /**
     * Create style string from styles data
     * @param styles
     * @returns {string}
     */

  }, {
    key: "styleStringFromStyles",
    value: function styleStringFromStyles(styles) {
      return Object.keys(styles).map(function (selector) {
        return TheStyle.styleString(selector, styles[selector]);
      }).filter(Boolean).join(_os.EOL);
    }
  }]);
  return TheStyle;
}(_react.default.PureComponent);

TheStyle.propTypes = {
  /** CSS class name */
  className: _propTypes.default.string,

  /** DOM Id */
  id: _propTypes.default.string,

  /** Style selector prefix */
  prefix: _propTypes.default.string,

  /** Script type */
  type: _propTypes.default.string
};
TheStyle.defaultProps = {
  className: null,
  id: null,
  prefix: null,
  type: null
};
TheStyle.displayName = 'TheStyle';
TheStyle.ThemeValues = _theComponentConstants.ThemeValues;
var _default = TheStyle;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,