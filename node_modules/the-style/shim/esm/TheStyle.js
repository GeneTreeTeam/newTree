'use strict';

import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import c from 'classnames';
import nanoCSS from 'nano-css';
import { addon as keyframes } from 'nano-css/addon/keyframes';
import { addon as prefixer } from 'nano-css/addon/prefixer';
import { addon as unitless } from 'nano-css/addon/unitless';
import { EOL } from 'os';
import PropTypes from 'prop-types';
import React from 'react';
import { ThemeValues } from 'the-component-constants';
/**
 * Style of the-components
 */

var TheStyle =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(TheStyle, _React$PureComponent);

  function TheStyle() {
    _classCallCheck(this, TheStyle);

    return _possibleConstructorReturn(this, _getPrototypeOf(TheStyle).apply(this, arguments));
  }

  _createClass(TheStyle, [{
    key: "getChildrenAsString",
    value: function getChildrenAsString() {
      var children = this.props.children;

      if (!children) {
        return null;
      }

      return [].concat(children).map(function (child) {
        return child;
      }).join(EOL);
    }
  }, {
    key: "getInnerHTML",
    value: function getInnerHTML() {
      return [this.getStylesAsString(), this.getChildrenAsString()].filter(Boolean).join(EOL);
    }
  }, {
    key: "getStylesAsString",
    value: function getStylesAsString() {
      var _this$props = this.props,
          prefix = _this$props.prefix,
          styles = _this$props.styles;

      if (!styles) {
        return null;
      }

      return Object.keys(styles).map(function (selector) {
        return TheStyle.styleString([prefix, selector].filter(Boolean).join(' '), styles[selector]);
      }).filter(Boolean).join(EOL);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = props.className,
          id = props.id,
          type = props.type;
      return React.createElement("style", _extends({
        className: c('the-style', className)
      }, {
        id: id,
        type: type
      }, {
        dangerouslySetInnerHTML: {
          __html: this.getInnerHTML()
        }
      }));
    }
  }], [{
    key: "styles",
    value: function styles(values) {
      return Object(values);
    }
    /**
     * Convert style into style string
     * @param {string} selector - Selector string
     * @param {Object} style - Style string
     * @param {string} [atRule=null]
     * @returns {Object} Style object
     */

  }, {
    key: "styleString",
    value: function styleString(selector, style) {
      var _this = this;

      var atRule = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (/^@/.test(selector)) {
        var styleString = Object.entries(style).map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              s = _ref2[0],
              sl = _ref2[1];

          return _this.styleString(s, sl);
        }).join(' ');
        return "".concat(selector, " { ").concat(styleString, "}");
      }

      var nano = nanoCSS.create({
        client: false
      });
      unitless(nano);
      prefixer(nano);
      keyframes(nano);
      nano.put(selector, style, atRule);
      return String(nano.raw);
    }
    /**
     * Create style string from styles data
     * @param styles
     * @returns {string}
     */

  }, {
    key: "styleStringFromStyles",
    value: function styleStringFromStyles(styles) {
      return Object.keys(styles).map(function (selector) {
        return TheStyle.styleString(selector, styles[selector]);
      }).filter(Boolean).join(EOL);
    }
  }]);

  return TheStyle;
}(React.PureComponent);

TheStyle.propTypes = {
  /** CSS class name */
  className: PropTypes.string,

  /** DOM Id */
  id: PropTypes.string,

  /** Style selector prefix */
  prefix: PropTypes.string,

  /** Script type */
  type: PropTypes.string
};
TheStyle.defaultProps = {
  className: null,
  id: null,
  prefix: null,
  type: null
};
TheStyle.displayName = 'TheStyle';
TheStyle.ThemeValues = ThemeValues;
export default TheStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,