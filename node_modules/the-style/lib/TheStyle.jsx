'use strict'

import c from 'classnames'
import nanoCSS from 'nano-css'
import { addon as keyframes } from 'nano-css/addon/keyframes'
import { addon as prefixer } from 'nano-css/addon/prefixer'
import { addon as unitless } from 'nano-css/addon/unitless'
import { EOL } from 'os'
import PropTypes from 'prop-types'
import React from 'react'
import { ThemeValues } from 'the-component-constants'

/**
 * Style of the-components
 */
class TheStyle extends React.PureComponent {
  static styles (values) {
    return Object(values)
  }

  /**
   * Convert style into style string
   * @param {string} selector - Selector string
   * @param {Object} style - Style string
   * @param {string} [atRule=null]
   * @returns {Object} Style object
   */
  static styleString (selector, style, atRule = null) {
    if (/^@/.test(selector)) {
      const styleString = Object.entries((style)).map(([s, sl]) => this.styleString(s, sl)).join(' ')
      return `${selector} { ${styleString}}`
    }
    const nano = nanoCSS.create({ client: false })
    unitless(nano)
    prefixer(nano)
    keyframes(nano)
    nano.put(selector, style, atRule)
    return String(nano.raw)
  }

  /**
   * Create style string from styles data
   * @param styles
   * @returns {string}
   */
  static styleStringFromStyles (styles) {
    return Object
      .keys(styles)
      .map((selector) => TheStyle.styleString(selector, styles[selector]))
      .filter(Boolean)
      .join(EOL)
  }

  getChildrenAsString () {
    const { children } = this.props
    if (!children) {
      return null
    }
    return [].concat(children).map((child) => {
      return child
    }).join(EOL)
  }

  getInnerHTML () {
    return [
      this.getStylesAsString(),
      this.getChildrenAsString()
    ].filter(Boolean).join(EOL)
  }

  getStylesAsString () {
    const { prefix, styles } = this.props
    if (!styles) {
      return null
    }
    return Object
      .keys(styles)
      .map((selector) =>
        TheStyle.styleString(
          [prefix, selector].filter(Boolean).join(' '),
          styles[selector]
        )
      )
      .filter(Boolean)
      .join(EOL)
  }

  render () {
    const { props } = this
    const {
      className,
      id,
      type,
    } = props
    return (
      <style className={c('the-style', className)}
             {...{ id, type }}
             dangerouslySetInnerHTML={{ __html: this.getInnerHTML() }}
      >
      </style>
    )
  }
}

TheStyle.propTypes = {
  /** CSS class name */
  className: PropTypes.string,
  /** DOM Id */
  id: PropTypes.string,
  /** Style selector prefix */
  prefix: PropTypes.string,
  /** Script type */
  type: PropTypes.string,
}

TheStyle.defaultProps = {
  className: null,
  id: null,
  prefix: null,
  type: null,
}

TheStyle.displayName = 'TheStyle'

TheStyle.ThemeValues = ThemeValues

export default TheStyle
