/**
 * Extract event handlers for component props
 * @function eventHandlersFor
 * @param {Object} props - Component prop
 * @param {Object} [options={}]
 * @param {string[]} [options.except] - Exception names
 * @returns {Object} Props for html attributes
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _theComponentConstants = require("the-component-constants");

var handlerNames = (0, _toConsumableArray2.default)(_theComponentConstants.SupportedProps.mouseEvents.split(',')).concat((0, _toConsumableArray2.default)(_theComponentConstants.SupportedProps.selectionEvents.split(',')), (0, _toConsumableArray2.default)(_theComponentConstants.SupportedProps.touchEvents.split(',')), (0, _toConsumableArray2.default)(_theComponentConstants.SupportedProps.uiEvents.split(',')), (0, _toConsumableArray2.default)(_theComponentConstants.SupportedProps.mediaEvents.split(',')), (0, _toConsumableArray2.default)(_theComponentConstants.SupportedProps.imageEvents.split(',')));
/** @lends eventHandlersFor */

function eventHandlersFor(props) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$except = options.except,
      except = _options$except === void 0 ? [] : _options$except;
  return Object.keys(props).filter(function (name) {
    return !except.includes(name);
  }).filter(function (name) {
    return handlerNames.includes(name);
  }).reduce(function (results, name) {
    return Object.assign(results, (0, _defineProperty2.default)({}, name, props[name]));
  }, {});
}

var _default = eventHandlersFor;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50SGFuZGxlcnNGb3IuanN4Il0sIm5hbWVzIjpbImhhbmRsZXJOYW1lcyIsIlN1cHBvcnRlZFByb3BzIiwibW91c2VFdmVudHMiLCJzcGxpdCIsInNlbGVjdGlvbkV2ZW50cyIsInRvdWNoRXZlbnRzIiwidWlFdmVudHMiLCJtZWRpYUV2ZW50cyIsImltYWdlRXZlbnRzIiwiZXZlbnRIYW5kbGVyc0ZvciIsInByb3BzIiwib3B0aW9ucyIsImV4Y2VwdCIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJuYW1lIiwiaW5jbHVkZXMiLCJyZWR1Y2UiLCJyZXN1bHRzIiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBLElBQU1BLFlBQVksb0NBQ2JDLHNDQUFlQyxXQUFmLENBQTJCQyxLQUEzQixDQUFpQyxHQUFqQyxDQURhLDBDQUViRixzQ0FBZUcsZUFBZixDQUErQkQsS0FBL0IsQ0FBcUMsR0FBckMsQ0FGYSxvQ0FHYkYsc0NBQWVJLFdBQWYsQ0FBMkJGLEtBQTNCLENBQWlDLEdBQWpDLENBSGEsb0NBSWJGLHNDQUFlSyxRQUFmLENBQXdCSCxLQUF4QixDQUE4QixHQUE5QixDQUphLG9DQUtiRixzQ0FBZU0sV0FBZixDQUEyQkosS0FBM0IsQ0FBaUMsR0FBakMsQ0FMYSxvQ0FNYkYsc0NBQWVPLFdBQWYsQ0FBMkJMLEtBQTNCLENBQWlDLEdBQWpDLENBTmEsRUFBbEI7QUFTQTs7QUFDQSxTQUFTTSxnQkFBVCxDQUEyQkMsS0FBM0IsRUFBZ0Q7QUFBQSxNQUFkQyxPQUFjLHVFQUFKLEVBQUk7QUFBQSx3QkFDeEJBLE9BRHdCLENBQ3hDQyxNQUR3QztBQUFBLE1BQ3hDQSxNQUR3QyxnQ0FDL0IsRUFEK0I7QUFFOUMsU0FBT0MsTUFBTSxDQUFDQyxJQUFQLENBQVlKLEtBQVosRUFDSkssTUFESSxDQUNHLFVBQUNDLElBQUQ7QUFBQSxXQUFVLENBQUNKLE1BQU0sQ0FBQ0ssUUFBUCxDQUFnQkQsSUFBaEIsQ0FBWDtBQUFBLEdBREgsRUFFSkQsTUFGSSxDQUVHLFVBQUNDLElBQUQ7QUFBQSxXQUFVaEIsWUFBWSxDQUFDaUIsUUFBYixDQUFzQkQsSUFBdEIsQ0FBVjtBQUFBLEdBRkgsRUFHSkUsTUFISSxDQUdHLFVBQUNDLE9BQUQsRUFBVUgsSUFBVjtBQUFBLFdBQW1CSCxNQUFNLENBQUNPLE1BQVAsQ0FBY0QsT0FBZCxvQ0FDeEJILElBRHdCLEVBQ2pCTixLQUFLLENBQUVNLElBQUYsQ0FEWSxFQUFuQjtBQUFBLEdBSEgsRUFLRCxFQUxDLENBQVA7QUFNRDs7ZUFFY1AsZ0IiLCJzb3VyY2VSb290IjoiLi4vbGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRyYWN0IGV2ZW50IGhhbmRsZXJzIGZvciBjb21wb25lbnQgcHJvcHNcbiAqIEBmdW5jdGlvbiBldmVudEhhbmRsZXJzRm9yXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBDb21wb25lbnQgcHJvcFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICogQHBhcmFtIHtzdHJpbmdbXX0gW29wdGlvbnMuZXhjZXB0XSAtIEV4Y2VwdGlvbiBuYW1lc1xuICogQHJldHVybnMge09iamVjdH0gUHJvcHMgZm9yIGh0bWwgYXR0cmlidXRlc1xuICovXG4ndXNlIHN0cmljdCdcblxuaW1wb3J0IHsgU3VwcG9ydGVkUHJvcHMgfSBmcm9tICd0aGUtY29tcG9uZW50LWNvbnN0YW50cydcblxuY29uc3QgaGFuZGxlck5hbWVzID0gW1xuICAuLi5TdXBwb3J0ZWRQcm9wcy5tb3VzZUV2ZW50cy5zcGxpdCgnLCcpLFxuICAuLi5TdXBwb3J0ZWRQcm9wcy5zZWxlY3Rpb25FdmVudHMuc3BsaXQoJywnKSxcbiAgLi4uU3VwcG9ydGVkUHJvcHMudG91Y2hFdmVudHMuc3BsaXQoJywnKSxcbiAgLi4uU3VwcG9ydGVkUHJvcHMudWlFdmVudHMuc3BsaXQoJywnKSxcbiAgLi4uU3VwcG9ydGVkUHJvcHMubWVkaWFFdmVudHMuc3BsaXQoJywnKSxcbiAgLi4uU3VwcG9ydGVkUHJvcHMuaW1hZ2VFdmVudHMuc3BsaXQoJywnKVxuXVxuXG4vKiogQGxlbmRzIGV2ZW50SGFuZGxlcnNGb3IgKi9cbmZ1bmN0aW9uIGV2ZW50SGFuZGxlcnNGb3IgKHByb3BzLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgZXhjZXB0ID0gW10gfSA9IG9wdGlvbnNcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKVxuICAgIC5maWx0ZXIoKG5hbWUpID0+ICFleGNlcHQuaW5jbHVkZXMobmFtZSkpXG4gICAgLmZpbHRlcigobmFtZSkgPT4gaGFuZGxlck5hbWVzLmluY2x1ZGVzKG5hbWUpKVxuICAgIC5yZWR1Y2UoKHJlc3VsdHMsIG5hbWUpID0+IE9iamVjdC5hc3NpZ24ocmVzdWx0cywge1xuICAgICAgW25hbWVdOiBwcm9wc1sgbmFtZSBdLFxuICAgIH0pLCB7fSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXZlbnRIYW5kbGVyc0ZvclxuIl19