/**
 * Extract event handlers for component props
 * @function eventHandlersFor
 * @param {Object} props - Component prop
 * @param {Object} [options={}]
 * @param {string[]} [options.except] - Exception names
 * @returns {Object} Props for html attributes
 */
'use strict';

import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { SupportedProps } from 'the-component-constants';

var handlerNames = _toConsumableArray(SupportedProps.mouseEvents.split(',')).concat(_toConsumableArray(SupportedProps.selectionEvents.split(',')), _toConsumableArray(SupportedProps.touchEvents.split(',')), _toConsumableArray(SupportedProps.uiEvents.split(',')), _toConsumableArray(SupportedProps.mediaEvents.split(',')), _toConsumableArray(SupportedProps.imageEvents.split(',')));
/** @lends eventHandlersFor */


function eventHandlersFor(props) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$except = options.except,
      except = _options$except === void 0 ? [] : _options$except;
  return Object.keys(props).filter(function (name) {
    return !except.includes(name);
  }).filter(function (name) {
    return handlerNames.includes(name);
  }).reduce(function (results, name) {
    return Object.assign(results, _defineProperty({}, name, props[name]));
  }, {});
}

export default eventHandlersFor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50SGFuZGxlcnNGb3IuanMiXSwibmFtZXMiOlsiU3VwcG9ydGVkUHJvcHMiLCJoYW5kbGVyTmFtZXMiLCJtb3VzZUV2ZW50cyIsInNwbGl0Iiwic2VsZWN0aW9uRXZlbnRzIiwidG91Y2hFdmVudHMiLCJ1aUV2ZW50cyIsIm1lZGlhRXZlbnRzIiwiaW1hZ2VFdmVudHMiLCJldmVudEhhbmRsZXJzRm9yIiwicHJvcHMiLCJvcHRpb25zIiwiZXhjZXB0IiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsIm5hbWUiLCJpbmNsdWRlcyIsInJlZHVjZSIsInJlc3VsdHMiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVFBOzs7O0FBRUEsU0FBU0EsY0FBVCxRQUErQix5QkFBL0I7O0FBRUEsSUFBTUMsWUFBWSxzQkFDYkQsY0FBYyxDQUFDRSxXQUFmLENBQTJCQyxLQUEzQixDQUFpQyxHQUFqQyxDQURhLDRCQUViSCxjQUFjLENBQUNJLGVBQWYsQ0FBK0JELEtBQS9CLENBQXFDLEdBQXJDLENBRmEsc0JBR2JILGNBQWMsQ0FBQ0ssV0FBZixDQUEyQkYsS0FBM0IsQ0FBaUMsR0FBakMsQ0FIYSxzQkFJYkgsY0FBYyxDQUFDTSxRQUFmLENBQXdCSCxLQUF4QixDQUE4QixHQUE5QixDQUphLHNCQUtiSCxjQUFjLENBQUNPLFdBQWYsQ0FBMkJKLEtBQTNCLENBQWlDLEdBQWpDLENBTGEsc0JBTWJILGNBQWMsQ0FBQ1EsV0FBZixDQUEyQkwsS0FBM0IsQ0FBaUMsR0FBakMsQ0FOYSxFQUFsQjtBQVNBOzs7QUFDQSxTQUFTTSxnQkFBVCxDQUEyQkMsS0FBM0IsRUFBZ0Q7QUFBQSxNQUFkQyxPQUFjLHVFQUFKLEVBQUk7QUFBQSx3QkFDeEJBLE9BRHdCLENBQ3hDQyxNQUR3QztBQUFBLE1BQ3hDQSxNQUR3QyxnQ0FDL0IsRUFEK0I7QUFFOUMsU0FBT0MsTUFBTSxDQUFDQyxJQUFQLENBQVlKLEtBQVosRUFDSkssTUFESSxDQUNHLFVBQUNDLElBQUQ7QUFBQSxXQUFVLENBQUNKLE1BQU0sQ0FBQ0ssUUFBUCxDQUFnQkQsSUFBaEIsQ0FBWDtBQUFBLEdBREgsRUFFSkQsTUFGSSxDQUVHLFVBQUNDLElBQUQ7QUFBQSxXQUFVZixZQUFZLENBQUNnQixRQUFiLENBQXNCRCxJQUF0QixDQUFWO0FBQUEsR0FGSCxFQUdKRSxNQUhJLENBR0csVUFBQ0MsT0FBRCxFQUFVSCxJQUFWO0FBQUEsV0FBbUJILE1BQU0sQ0FBQ08sTUFBUCxDQUFjRCxPQUFkLHNCQUN4QkgsSUFEd0IsRUFDakJOLEtBQUssQ0FBRU0sSUFBRixDQURZLEVBQW5CO0FBQUEsR0FISCxFQUtELEVBTEMsQ0FBUDtBQU1EOztBQUVELGVBQWVQLGdCQUFmIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0cmFjdCBldmVudCBoYW5kbGVycyBmb3IgY29tcG9uZW50IHByb3BzXG4gKiBAZnVuY3Rpb24gZXZlbnRIYW5kbGVyc0ZvclxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gQ29tcG9uZW50IHByb3BcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV1cbiAqIEBwYXJhbSB7c3RyaW5nW119IFtvcHRpb25zLmV4Y2VwdF0gLSBFeGNlcHRpb24gbmFtZXNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFByb3BzIGZvciBodG1sIGF0dHJpYnV0ZXNcbiAqL1xuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCB7IFN1cHBvcnRlZFByb3BzIH0gZnJvbSAndGhlLWNvbXBvbmVudC1jb25zdGFudHMnXG5cbmNvbnN0IGhhbmRsZXJOYW1lcyA9IFtcbiAgLi4uU3VwcG9ydGVkUHJvcHMubW91c2VFdmVudHMuc3BsaXQoJywnKSxcbiAgLi4uU3VwcG9ydGVkUHJvcHMuc2VsZWN0aW9uRXZlbnRzLnNwbGl0KCcsJyksXG4gIC4uLlN1cHBvcnRlZFByb3BzLnRvdWNoRXZlbnRzLnNwbGl0KCcsJyksXG4gIC4uLlN1cHBvcnRlZFByb3BzLnVpRXZlbnRzLnNwbGl0KCcsJyksXG4gIC4uLlN1cHBvcnRlZFByb3BzLm1lZGlhRXZlbnRzLnNwbGl0KCcsJyksXG4gIC4uLlN1cHBvcnRlZFByb3BzLmltYWdlRXZlbnRzLnNwbGl0KCcsJylcbl1cblxuLyoqIEBsZW5kcyBldmVudEhhbmRsZXJzRm9yICovXG5mdW5jdGlvbiBldmVudEhhbmRsZXJzRm9yIChwcm9wcywgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGV4Y2VwdCA9IFtdIH0gPSBvcHRpb25zXG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcylcbiAgICAuZmlsdGVyKChuYW1lKSA9PiAhZXhjZXB0LmluY2x1ZGVzKG5hbWUpKVxuICAgIC5maWx0ZXIoKG5hbWUpID0+IGhhbmRsZXJOYW1lcy5pbmNsdWRlcyhuYW1lKSlcbiAgICAucmVkdWNlKChyZXN1bHRzLCBuYW1lKSA9PiBPYmplY3QuYXNzaWduKHJlc3VsdHMsIHtcbiAgICAgIFtuYW1lXTogcHJvcHNbIG5hbWUgXSxcbiAgICB9KSwge30pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGV2ZW50SGFuZGxlcnNGb3JcbiJdfQ==